name: pypi

on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  build_wheels_windows:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Wheels Windows
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install cibuildwheel==2.23.1

      - name: Clean build artifacts
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          if (Test-Path wheelhouse) { Remove-Item -Recurse -Force wheelhouse }
          Get-ChildItem -Filter "*.egg-info" | Remove-Item -Recurse -Force
        shell: pwsh

      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-*"
          CIBW_SKIP: "*-musllinux_* *-win32 *_i686 *-win_arm64"
          CIBW_BEFORE_ALL_WINDOWS: |
            pip install delvewheel
            pip install --upgrade pip wheel setuptools
          CIBW_BEFORE_BUILD: |
            python -m pip install --upgrade pip wheel setuptools
            pip install numpy compas pytest build line_profiler
            if (Test-Path build) { Remove-Item -Recurse -Force build }
            if (Test-Path dist) { Remove-Item -Recurse -Force dist }
            if (Test-Path wheelhouse) { Remove-Item -Recurse -Force wheelhouse }
            Get-ChildItem -Filter "*.egg-info" | Remove-Item -Recurse -Force
          CIBW_TEST_REQUIRES: numpy compas pytest line_profiler
          CIBW_TEST_COMMAND: |
            pip install --upgrade pip wheel setuptools
            pip install numpy compas pytest line_profiler
            pip install --force-reinstall {wheel}
            cd {package}
            python -m pytest tests -v
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: |
            delvewheel repair -w {dest_dir} {wheel}
            Get-ChildItem -Path {dest_dir}
          CIBW_ENVIRONMENT_WINDOWS: |
            CMAKE_GENERATOR="Visual Studio 17 2022"
            CMAKE_GENERATOR_PLATFORM=x64
            CMAKE_SYSTEM_VERSION=10.0.19041.0
            WindowsSDKVersion=10.0.19041.0
            SETUPTOOLS_USE_DISTUTILS=stdlib
            DISTUTILS_USE_SDK=1
            MSSdk=1
            PIP_NO_BUILD_ISOLATION=0
            PIP_NO_CACHE_DIR=off
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20 -DCMAKE_SYSTEM_VERSION=10.0.19041.0"
            CIBW_BUILD_VERBOSITY=3
        run: |
          python -m cibuildwheel --output-dir wheelhouse
          Write-Host "=== Contents of wheelhouse ==="
          Get-ChildItem -Path wheelhouse
          Get-Item wheelhouse/*.whl | ForEach-Object {
            Write-Host "=== File info for $($_.Name) ==="
            $_.Length/1KB
          }
        shell: pwsh

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: ./wheelhouse/*.whl

  build_wheels_macos:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Wheels macOS ${{ matrix.arch }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, arm64]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install cibuildwheel==2.23.1 delocate

      - name: Clean build artifacts
        run: |
          rm -rf build dist wheelhouse *.egg-info
        shell: bash

      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-*"
          CIBW_SKIP: "*-musllinux_* *-win32 *_i686"
          CIBW_BEFORE_BUILD: |
            python -m pip install --upgrade pip wheel setuptools
            pip install numpy compas pytest build line_profiler
            rm -rf build dist wheelhouse *.egg-info
          CIBW_TEST_REQUIRES: numpy compas pytest line_profiler
          CIBW_TEST_COMMAND: |
            pip install --upgrade pip wheel setuptools
            pip install numpy compas pytest line_profiler
            pip install --force-reinstall {wheel}
            cd {package}
            python -m pytest tests -v
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            delocate-wheel -w {dest_dir} -v {wheel}
            ls -la {dest_dir}
          CIBW_ENVIRONMENT_MACOS: |
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13"
            MACOSX_DEPLOYMENT_TARGET=10.13
            CMAKE_OSX_DEPLOYMENT_TARGET=10.13
            CFLAGS="-mmacosx-version-min=10.13"
            CXXFLAGS="-mmacosx-version-min=10.13"
            OBJCFLAGS="-mmacosx-version-min=10.13"
            OBJCXXFLAGS="-mmacosx-version-min=10.13"
            _PYTHON_HOST_PLATFORM="macosx-10.13-{arch}"
            PIP_NO_BUILD_ISOLATION=0
            PIP_NO_CACHE_DIR=off
            CIBW_BUILD_VERBOSITY=3
            ARCHFLAGS="-arch {arch}"
        run: |
          python -m cibuildwheel --output-dir wheelhouse .
          ls -la wheelhouse/
          file wheelhouse/*.whl

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  build_wheels_manylinux:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Wheels manylinux
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install cibuildwheel==2.23.1 auditwheel

      - name: Clean build artifacts
        run: |
          rm -rf build dist wheelhouse *.egg-info
        shell: bash

      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-*"
          CIBW_SKIP: "pp* *musllinux* *-win32 *_i686"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_ARCHS_LINUX: x86_64
          CIBW_BEFORE_ALL_LINUX: |
            # Install system dependencies
            yum install -y python-devel cmake gcc-c++ make

            # Download and install CGAL with backup mirror and TLS verification
            for url in \
              "https://github.com/CGAL/cgal/releases/download/v6.0.1/CGAL-6.0.1.tar.xz" \
              "https://github.com/CGAL/cgal/releases/download/releases/CGAL-6.0.1/CGAL-6.0.1.tar.xz"
            do
              curl -L --tlsv1.2 --proto '=https' "$url" -o CGAL.tar.xz --retry 3 --retry-delay 5 && break
            done
            tar xf CGAL.tar.xz
            cd CGAL-*
            mkdir build && cd build
            cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_CXX_STANDARD=20 \
              -DCMAKE_CXX_FLAGS="-faligned-allocation" \
              ..
            make -j$(nproc)
            make install
            cd ../..
            rm -rf CGAL*

          CIBW_BEFORE_BUILD: |
            python -m pip install --upgrade pip wheel setuptools
            pip install numpy compas pytest build line_profiler
            rm -rf build dist wheelhouse *.egg-info

          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            # First attempt repair with auditwheel
            if ! auditwheel repair -w {dest_dir} {wheel}; then
              echo "Initial repair attempt failed, checking wheel contents..."
              auditwheel show {wheel}
              echo "Attempting repair with extra debug..."
              AUDITWHEEL_DEBUG=1 auditwheel repair -w {dest_dir} {wheel} || echo "Wheel repair failed"
            fi
            ls -la {dest_dir}

          CIBW_TEST_REQUIRES: numpy compas pytest line_profiler
          CIBW_TEST_COMMAND: |
            pip install --upgrade pip wheel setuptools
            pip install numpy compas pytest line_profiler
            pip install --force-reinstall {wheel}
            cd {package}
            python -m pytest tests -v

          CIBW_ENVIRONMENT_LINUX: |
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20"
            CXXFLAGS="-faligned-allocation"
            PIP_NO_BUILD_ISOLATION=0
            PIP_NO_CACHE_DIR=off
            CIBW_BUILD_VERBOSITY=3
            AUDITWHEEL_PLAT=manylinux2014_x86_64
            _PYTHON_HOST_PLATFORM=linux_x86_64
            LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:$LD_LIBRARY_PATH

        run: |
          python -m cibuildwheel --output-dir wheelhouse .
          ls -la wheelhouse/
          file wheelhouse/*.whl
          # Show wheel info for debugging
          for wheel in wheelhouse/*.whl; do
            echo "=== Wheel info for $wheel ==="
            auditwheel show "$wheel"
          done

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-manylinux
          path: ./wheelhouse/*.whl

  build_sdist:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Clean build artifacts
        run: |
          rm -rf build dist wheelhouse *.egg-info
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy compas pytest build line_profiler

      - name: Build SDist
        run: python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Publish to PyPI
    needs: [build_wheels_windows, build_wheels_macos, build_sdist, build_wheels_manylinux]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/test_my_binding
    permissions:
      id-token: write

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install twine check-wheel-contents

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create dist directory and organize artifacts
        run: |
          mkdir -p dist
          echo "=== Copying wheels ==="
          # First verify artifacts exist
          if ! ls artifacts/wheels-*/*.whl >/dev/null 2>&1; then
            echo "ERROR: No wheel files found in artifacts!"
            ls -R artifacts/
            exit 1
          fi
          # Copy wheels with verbose output
          cp -v artifacts/wheels-*/*.whl dist/
          
          echo "=== Copying sdist ==="
          if ! ls artifacts/sdist/*.tar.gz >/dev/null 2>&1; then
            echo "ERROR: No sdist files found!"
            ls -R artifacts/
            exit 1
          fi
          cp -v artifacts/sdist/*.tar.gz dist/
          
          echo "=== Contents of dist ==="
          ls -la dist/
          
          # Verify we have files to publish
          wheel_count=$(ls dist/*.whl 2>/dev/null | wc -l)
          sdist_count=$(ls dist/*.tar.gz 2>/dev/null | wc -l)
          echo "Found $wheel_count wheels and $sdist_count sdist files"
          
          if [ "$wheel_count" -eq 0 ] || [ "$sdist_count" -eq 0 ]; then
            echo "ERROR: Missing required distribution files!"
            exit 1
          fi

      - name: Verify wheel platform tags
        run: |
          echo "=== Checking wheel contents ==="
          # First verify wheels exist and show them
          echo "Wheels to check:"
          ls -l dist/*.whl
          
          # Run checks on each wheel individually to avoid globbing issues
          for wheel in dist/*.whl; do
            echo "Checking contents of $wheel"
            check-wheel-contents "$wheel" || exit 1
            
            echo "Checking metadata of $wheel"
            python3 -c "from wheel.wheelfile import WheelFile; print(WheelFile('$wheel').parsed_wheel_info)" || exit 1
          done
          
          echo "=== Checking with twine ==="
          twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

name: pypi

on:
  workflow_dispatch:
  push:
    branches:
      - main  # Temporarily allowing main branch pushes

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: manylinux
            arch: x86_64

          - os: macos-latest
            platform: macOS
            arch: x86_64

          - os: macos-latest
            platform: macOS
            arch: arm64

          - os: windows-latest
            platform: Windows
            arch: x86_64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: pip install cibuildwheel==2.23.1
      - name: Clean build artifacts
        shell: bash
        run: rm -rf build dist wheelhouse *.egg-info

      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-*"
          CIBW_SKIP: "*-musllinux_* *-win32 *_i686 *-win_arm64"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.13
        run: python -m cibuildwheel --output-dir wheelhouse .

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}-${{ matrix.arch }}
          path: wheelhouse/*.whl

  run_tests:
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install pytest
      - name: Run Tests
        shell: bash
        run: |
          echo "Running tests..."
          if [ -d "tests" ]; then
            echo "Tests directory found, proceeding with tests..."
            python -m pytest tests/ -v
          else
            echo "No tests directory found! Exiting..."
            exit 1
          fi
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install build
      - name: Build SDist
        run: python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    needs: [run_tests, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/test_my_binding
    permissions:
      id-token: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Install Twine
        run: pip install twine
      - name: List files before upload
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pwsh -Command "Get-ChildItem -Path . -Recurse -Force"
          else
            ls -lhR
          fi
      - name: Publish to PyPI
        run: python -m twine upload dist/*

      - name: Publish missing macOS x86_64 wheel (if needed)
        run: python -m twine upload dist/*.cp39-*macosx_11_0_x86_64*.whl || echo "macOS x86_64 wheel already uploaded."

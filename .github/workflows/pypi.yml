name: pypi

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build_wheels_cpython:
    name: Build ${{ matrix.python }}-${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        python: [cp39, cp310, cp311, cp312]
        platform:
          - name: windows-amd64
            os: windows-latest
            arch: AMD64
            build_tag: "*win_amd64"
          - name: macos-x86_64
            os: macos-latest
            arch: x86_64
            build_tag: "*macosx_*x86_64"
          - name: macos-arm64
            os: macos-latest
            arch: arm64
            build_tag: "*macosx_*arm64"
          - name: manylinux-x86_64
            os: ubuntu-latest
            arch: x86_64
            build_tag: "*manylinux*x86_64"
          - name: manylinux-aarch64
            os: ubuntu-latest
            arch: aarch64
            build_tag: "*manylinux*aarch64"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          pip install cibuildwheel==2.23.1

      - name: Clean build artifacts
        run: |
          rm -rf build dist wheelhouse *.egg-info
        shell: bash

      - name: Build wheels
        env:
          CIBW_BUILD: "${{ matrix.python }}-${{ matrix.platform.build_tag }}"
          CIBW_SKIP: "*musllinux* *win32 *macosx_10_9* *macosx_10_10* *macosx_10_11* *macosx_10_12*"  # Skip older macOS versions which are not supported by CGAL
          CIBW_ARCHS_LINUX: "${{ matrix.platform.arch }}"
          CIBW_ARCHS_MACOS: "${{ matrix.platform.arch }}"
          CIBW_ARCHS_WINDOWS: "AMD64"  # Only build for 64-bit Windows
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          CIBW_BEFORE_ALL_LINUX: |
            sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
            sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
            yum -y install yum-utils
            yum-config-manager --enable powertools
            yum -y update
            yum -y install gcc-toolset-11-gcc gcc-toolset-11-gcc-c++
            source /opt/rh/gcc-toolset-11/enable
          CIBW_BEFORE_BUILD_LINUX: |
            pip install numpy compas pytest build line_profiler
          CIBW_BEFORE_BUILD_MACOS: |
            pip install numpy compas pytest build line_profiler
          CIBW_BEFORE_BUILD_WINDOWS: |
            pip install numpy compas pytest build line_profiler
          CIBW_ENVIRONMENT_WINDOWS: |
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20"
          CIBW_ENVIRONMENT_LINUX: |
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20"
            CXXFLAGS="-faligned-allocation"
          CIBW_ENVIRONMENT_MACOS: |
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20"
            MACOSX_DEPLOYMENT_TARGET=10.13
            CXXFLAGS="-faligned-allocation"
            _PYTHON_HOST_PLATFORM="macosx-10.13-${{ matrix.platform.arch }}"
        run: python -m cibuildwheel --output-dir wheelhouse .

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.python }}-${{ matrix.platform.name }}
          path: wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build
        run: |
          pip install build

      - name: Build sdist
        run: python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels_cpython, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/test_my_binding
    permissions:
      id-token: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
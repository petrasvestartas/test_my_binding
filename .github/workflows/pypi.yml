name: pypi

on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  build_wheels_cpython:
    name: Build ${{ matrix.python }}-${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: windows-amd64
            os: windows-latest
            arch: AMD64
            build_tag: "*win_amd64"
          - name: macos-x86_64
            os: macos-latest
            arch: x86_64
            build_tag: "*macosx_*x86_64"
          - name: macos-arm64
            os: macos-latest
            arch: arm64
            build_tag: "*macosx_*arm64"
          - name: manylinux-x86_64
            os: ubuntu-latest
            arch: x86_64
            build_tag: "*manylinux*x86_64"
          - name: manylinux-aarch64
            os: ubuntu-latest
            arch: aarch64
            build_tag: "*manylinux*aarch64"
        python: [cp39, cp310, cp311, cp312]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          pip install cibuildwheel==2.23.1

      - name: Clean build artifacts
        run: |
          rm -rf build dist wheelhouse *.egg-info
        shell: bash

      - name: Build wheels
        env:
          CIBW_BUILD: "${{ matrix.python }}-${{ matrix.platform.build_tag }}"
          CIBW_SKIP: "pp* *musllinux* *-win_arm64 *macosx_10_9* *macosx_10_10* *macosx_10_11* *macosx_10_12* *macosx_10.9* *macosx_10.10* *macosx_10.11* *macosx_10.12*"
          CIBW_ARCHS_LINUX: "${{ matrix.platform.arch }}"
          CIBW_ARCHS_MACOS: "${{ matrix.platform.arch }}"
          CIBW_ARCHS_WINDOWS: "${{ matrix.platform.arch }}"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          CIBW_BEFORE_ALL_LINUX: |
            sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
            sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
            yum clean all
            yum makecache
            yum update -y
            yum install -y python-devel cmake gcc-c++ make
          CIBW_BEFORE_ALL_WINDOWS: |
            pip install delvewheel
            choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows.SDK.19041"
          CIBW_BEFORE_BUILD: |
            pip install --upgrade pip wheel setuptools
            pip install numpy compas pytest build line_profiler
            rm -rf build dist wheelhouse *.egg-info
          CIBW_TEST_REQUIRES: numpy compas pytest line_profiler
          CIBW_TEST_COMMAND: |
            pip install --force-reinstall {wheel}
            cd {package}
            python -m pytest tests -v
          CIBW_ENVIRONMENT_MACOS: |
            MACOSX_DEPLOYMENT_TARGET=10.13
            CMAKE_OSX_DEPLOYMENT_TARGET=10.13
            _PYTHON_HOST_PLATFORM="macosx-10.13-${{ matrix.platform.arch }}"
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13"
            CFLAGS="-mmacosx-version-min=10.13"
            CXXFLAGS="-mmacosx-version-min=10.13 -faligned-allocation"
            LDFLAGS="-mmacosx-version-min=10.13"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            delocate-wheel --require-archs ${{ matrix.platform.arch }} -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
          CIBW_ENVIRONMENT_WINDOWS: |
            CMAKE_GENERATOR="Visual Studio 17 2022"
            CMAKE_GENERATOR_PLATFORM=x64
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20"
            SETUPTOOLS_USE_DISTUTILS=stdlib
            DISTUTILS_USE_SDK=1
            MSSdk=1
            PIP_NO_BUILD_ISOLATION=0
            PIP_NO_CACHE_DIR=off
          CIBW_ENVIRONMENT_LINUX: |
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20"
            CXXFLAGS="-faligned-allocation"
        run: python -m cibuildwheel --output-dir wheelhouse .

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.python }}-${{ matrix.platform.name }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Clean build artifacts
        run: |
          rm -rf build dist wheelhouse *.egg-info
        shell: bash

      - name: Install dependencies
        run: |
          pip install numpy compas pytest build line_profiler

      - name: Build SDist
        run: python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    needs: [build_wheels_cpython, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/test_my_binding
    permissions:
      id-token: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
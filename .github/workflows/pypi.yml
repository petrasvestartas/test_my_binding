name: pypi

on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  build_wheels:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Wheels ${{ matrix.platform }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: Windows
            os: windows-latest
            arch: x86_64
            skip: "*-musllinux_* *-win32 *_i686 *-win_arm64"
            repair_tool: delvewheel
            
          - platform: manylinux
            os: ubuntu-20.04
            arch: x86_64
            skip: "pp* *musllinux* *-win32 *_i686"
            repair_tool: auditwheel
            
          - platform: macOS
            os: macos-latest
            arch: x86_64
            skip: "*-musllinux_* *-win32 *_i686"
            repair_tool: delocate
            
          - platform: macOS
            os: macos-latest
            arch: arm64
            skip: "*-musllinux_* *-win32 *_i686"
            repair_tool: delocate

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install cibuildwheel==2.23.1
          if [ "${{ matrix.repair_tool }}" = "auditwheel" ]; then
            pip install auditwheel
          elif [ "${{ matrix.repair_tool }}" = "delocate" ]; then
            pip install delocate
          elif [ "${{ matrix.repair_tool }}" = "delvewheel" ]; then
            pip install delvewheel
          fi

      - name: Clean build artifacts
        run: |
          rm -rf build dist wheelhouse *.egg-info
        if: runner.os != 'Windows'

      - name: Clean build artifacts Windows
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          if (Test-Path wheelhouse) { Remove-Item -Recurse -Force wheelhouse }
          Get-ChildItem -Filter "*.egg-info" | Remove-Item -Recurse -Force
        if: runner.os == 'Windows'
        shell: pwsh

      - name: Configure build environment
        run: |
          echo "CIBW_BUILD=cp39-*" >> $GITHUB_ENV
          echo "CIBW_SKIP=${{ matrix.skip }}" >> $GITHUB_ENV
          
          # Windows-specific settings
          if [ "${{ runner.os }}" = "Windows" ]; then
            echo 'CIBW_BEFORE_ALL_WINDOWS<<EOF' >> $GITHUB_ENV
            echo 'pip install delvewheel' >> $GITHUB_ENV
            echo 'pip install --upgrade pip wheel setuptools' >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            
            echo 'CIBW_REPAIR_WHEEL_COMMAND_WINDOWS<<EOF' >> $GITHUB_ENV
            echo 'delvewheel repair -w {dest_dir} {wheel}' >> $GITHUB_ENV
            echo 'Get-ChildItem -Path {dest_dir}' >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            
            echo 'CIBW_ENVIRONMENT_WINDOWS<<EOF' >> $GITHUB_ENV
            echo 'CMAKE_GENERATOR="Visual Studio 17 2022"' >> $GITHUB_ENV
            echo 'CMAKE_GENERATOR_PLATFORM=x64' >> $GITHUB_ENV
            echo 'CMAKE_SYSTEM_VERSION=10.0.19041.0' >> $GITHUB_ENV
            echo 'WindowsSDKVersion=10.0.19041.0' >> $GITHUB_ENV
            echo 'SETUPTOOLS_USE_DISTUTILS=stdlib' >> $GITHUB_ENV
            echo 'DISTUTILS_USE_SDK=1' >> $GITHUB_ENV
            echo 'MSSdk=1' >> $GITHUB_ENV
            echo 'PIP_NO_BUILD_ISOLATION=0' >> $GITHUB_ENV
            echo 'PIP_NO_CACHE_DIR=off' >> $GITHUB_ENV
            echo 'CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20 -DCMAKE_SYSTEM_VERSION=10.0.19041.0"' >> $GITHUB_ENV
            echo 'CIBW_BUILD_VERBOSITY=3' >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
          fi

          # manylinux-specific settings
          if [ "${{ runner.os }}" = "Linux" ]; then
            echo "CIBW_MANYLINUX_X86_64_IMAGE=manylinux2014" >> $GITHUB_ENV
            echo "CIBW_ARCHS_LINUX=x86_64" >> $GITHUB_ENV
            
            echo 'CIBW_BEFORE_ALL_LINUX<<EOF' >> $GITHUB_ENV
            echo 'yum install -y python-devel cmake gcc-c++ make' >> $GITHUB_ENV
            echo 'for url in \' >> $GITHUB_ENV
            echo '  "https://github.com/CGAL/cgal/releases/download/v6.0.1/CGAL-6.0.1.tar.xz" \' >> $GITHUB_ENV
            echo '  "https://github.com/CGAL/cgal/releases/download/releases/CGAL-6.0.1/CGAL-6.0.1.tar.xz"; do' >> $GITHUB_ENV
            echo '  curl -L --tlsv1.2 --proto "=https" "$url" -o CGAL.tar.xz --retry 3 --retry-delay 5 && break' >> $GITHUB_ENV
            echo 'done' >> $GITHUB_ENV
            echo 'tar xf CGAL.tar.xz' >> $GITHUB_ENV
            echo 'cd CGAL-*' >> $GITHUB_ENV
            echo 'mkdir build && cd build' >> $GITHUB_ENV
            echo 'cmake \' >> $GITHUB_ENV
            echo '  -DCMAKE_BUILD_TYPE=Release \' >> $GITHUB_ENV
            echo '  -DCMAKE_CXX_STANDARD=20 \' >> $GITHUB_ENV
            echo '  -DCMAKE_CXX_FLAGS="-faligned-allocation" \' >> $GITHUB_ENV
            echo '  ..' >> $GITHUB_ENV
            echo 'make -j$(nproc)' >> $GITHUB_ENV
            echo 'make install' >> $GITHUB_ENV
            echo 'cd ../..' >> $GITHUB_ENV
            echo 'rm -rf CGAL*' >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            
            echo 'CIBW_REPAIR_WHEEL_COMMAND_LINUX<<EOF' >> $GITHUB_ENV
            echo 'if ! auditwheel repair -w {dest_dir} {wheel}; then' >> $GITHUB_ENV
            echo '  echo "Initial repair attempt failed, checking wheel contents..."' >> $GITHUB_ENV
            echo '  auditwheel show {wheel}' >> $GITHUB_ENV
            echo '  echo "Attempting repair with extra debug..."' >> $GITHUB_ENV
            echo '  AUDITWHEEL_DEBUG=1 auditwheel repair -w {dest_dir} {wheel} || echo "Wheel repair failed"' >> $GITHUB_ENV
            echo 'fi' >> $GITHUB_ENV
            echo 'ls -la {dest_dir}' >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            
            echo 'CIBW_ENVIRONMENT_LINUX<<EOF' >> $GITHUB_ENV
            echo 'CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20"' >> $GITHUB_ENV
            echo 'CXXFLAGS="-faligned-allocation"' >> $GITHUB_ENV
            echo 'PIP_NO_BUILD_ISOLATION=0' >> $GITHUB_ENV
            echo 'PIP_NO_CACHE_DIR=off' >> $GITHUB_ENV
            echo 'CIBW_BUILD_VERBOSITY=3' >> $GITHUB_ENV
            echo 'AUDITWHEEL_PLAT=manylinux2014_x86_64' >> $GITHUB_ENV
            echo '_PYTHON_HOST_PLATFORM=linux_x86_64' >> $GITHUB_ENV
            echo 'LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:$LD_LIBRARY_PATH' >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
          fi

          # macOS-specific settings
          if [ "${{ runner.os }}" = "macOS" ]; then
            echo 'CIBW_REPAIR_WHEEL_COMMAND_MACOS<<EOF' >> $GITHUB_ENV
            echo 'delocate-wheel -w {dest_dir} -v {wheel}' >> $GITHUB_ENV
            echo 'ls -la {dest_dir}' >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            
            echo 'CIBW_ENVIRONMENT_MACOS<<EOF' >> $GITHUB_ENV
            echo 'CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13"' >> $GITHUB_ENV
            echo 'MACOSX_DEPLOYMENT_TARGET=10.13' >> $GITHUB_ENV
            echo 'CMAKE_OSX_DEPLOYMENT_TARGET=10.13' >> $GITHUB_ENV
            echo 'CFLAGS="-mmacosx-version-min=10.13"' >> $GITHUB_ENV
            echo 'CXXFLAGS="-mmacosx-version-min=10.13"' >> $GITHUB_ENV
            echo 'OBJCFLAGS="-mmacosx-version-min=10.13"' >> $GITHUB_ENV
            echo 'OBJCXXFLAGS="-mmacosx-version-min=10.13"' >> $GITHUB_ENV
            echo '_PYTHON_HOST_PLATFORM="macosx-10.13-${{ matrix.arch }}"' >> $GITHUB_ENV
            echo 'PIP_NO_BUILD_ISOLATION=0' >> $GITHUB_ENV
            echo 'PIP_NO_CACHE_DIR=off' >> $GITHUB_ENV
            echo 'CIBW_BUILD_VERBOSITY=3' >> $GITHUB_ENV
            echo 'ARCHFLAGS="-arch ${{ matrix.arch }}"' >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
          fi

          # Common settings
          echo 'CIBW_BEFORE_BUILD<<EOF' >> $GITHUB_ENV
          echo 'python -m pip install --upgrade pip wheel setuptools' >> $GITHUB_ENV
          echo 'pip install numpy compas pytest build line_profiler' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

          echo 'CIBW_TEST_REQUIRES<<EOF' >> $GITHUB_ENV
          echo 'numpy' >> $GITHUB_ENV
          echo 'compas' >> $GITHUB_ENV
          echo 'pytest' >> $GITHUB_ENV
          echo 'line_profiler' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

          echo 'CIBW_TEST_COMMAND<<EOF' >> $GITHUB_ENV
          echo 'pip install --upgrade pip wheel setuptools' >> $GITHUB_ENV
          echo 'pip install numpy compas pytest line_profiler' >> $GITHUB_ENV
          echo 'pip install --force-reinstall {wheel}' >> $GITHUB_ENV
          echo 'cd {package}' >> $GITHUB_ENV
          echo 'python -m pytest tests -v' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Build wheels Unix
        if: runner.os != 'Windows'
        run: |
          python -m cibuildwheel --output-dir wheelhouse .
          ls -la wheelhouse/
          file wheelhouse/*.whl
          if [ "${{ matrix.repair_tool }}" = "auditwheel" ]; then
            for wheel in wheelhouse/*.whl; do
              echo "=== Wheel info for $wheel ==="
              auditwheel show "$wheel"
            done
          fi

      - name: Build wheels Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m cibuildwheel --output-dir wheelhouse
          Write-Host "=== Contents of wheelhouse ==="
          Get-ChildItem -Path wheelhouse
          Get-Item wheelhouse/*.whl | ForEach-Object {
            Write-Host "=== File info for $($_.Name) ==="
            $_.Length/1KB
          }

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  build_sdist:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Source Distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Build sdist
        run: |
          python -m pip install --upgrade pip build
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Publish to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/test_my_binding
    permissions:
      id-token: write

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install twine check-wheel-contents

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create dist directory and organize artifacts
        run: |
          mkdir -p dist
          echo "=== Copying wheels ==="
          # First verify artifacts exist
          if ! ls artifacts/wheels-*/*.whl >/dev/null 2>&1; then
            echo "ERROR: No wheel files found in artifacts!"
            ls -R artifacts/
            exit 1
          fi
          # Copy wheels with verbose output
          cp -v artifacts/wheels-*/*.whl dist/
          
          echo "=== Copying sdist ==="
          if ! ls artifacts/sdist/*.tar.gz >/dev/null 2>&1; then
            echo "ERROR: No sdist files found!"
            ls -R artifacts/
            exit 1
          fi
          cp -v artifacts/sdist/*.tar.gz dist/
          
          echo "=== Contents of dist ==="
          ls -la dist/
          
          # Verify we have files to publish
          wheel_count=$(ls dist/*.whl 2>/dev/null | wc -l)
          sdist_count=$(ls dist/*.tar.gz 2>/dev/null | wc -l)
          echo "Found $wheel_count wheels and $sdist_count sdist files"
          
          if [ "$wheel_count" -eq 0 ] || [ "$sdist_count" -eq 0 ]; then
            echo "ERROR: Missing required distribution files!"
            exit 1
          fi

      - name: Verify wheel platform tags
        run: |
          echo "=== Checking wheel contents ==="
          # First verify wheels exist and show them
          echo "Wheels to check:"
          ls -l dist/*.whl
          
          # Run checks on each wheel individually to avoid globbing issues
          for wheel in dist/*.whl; do
            echo "Checking contents of $wheel"
            check-wheel-contents "$wheel" || exit 1
            
            echo "Checking metadata of $wheel"
            python3 -c "from wheel.wheelfile import WheelFile; print(WheelFile('$wheel').parsed_wheel_info)" || exit 1
          done
          
          echo "=== Checking with twine ==="
          twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
